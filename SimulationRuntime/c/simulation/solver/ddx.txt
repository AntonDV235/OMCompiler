// For Lotka-Volterra
static modelica_real ddx(modelica_real** x, const uinteger index, modelica_real* state){
	if(index == 0){
		return 0.5*(1.5*x[0][1] - x[0][0]*x[1][1] - x[0][1]*x[1][0]);
	}
	else if(index == 1){
		return 0.5*(x[0][0]*x[1][1] + x[0][1]*x[1][0] - 7*x[1][1]);
	}
	else
		exit(2);
}


// For bball on Flat surface
static modelica_real ddx(modelica_real** x, const uinteger index, modelica_real* state){
	if(index == 0){
		return 0.5*(-0.1*x[0][1]);
	}
	else if(index == 1){
		return 0.5*(-0.1*x[1][1] - state[6]*(x[2][1]*1e6 + 30*x[1][1]));
	}
	else if(index == 2){
		return 0.5*(x[1][1]);
	}
	else
		exit(2);
}


// advection
static modelica_real ddx(modelica_real** x, const uinteger index, modelica_real* state){
	modelica_real mu =1000;
	if(index > 0 && index < 500){
		return 0.5*(mu*x[index][1]*(0.5-x[index][0])*x[index][0] -(-1.0+x[index][0])*mu*x[index][1]*x[index][0] -(x[index][1]-x[index-1][1])*500+ (-1.0+x[index][0])*mu*x[index][1]*(0.5-x[index][0]));
	}
	else if(index == 0){
		return 0.5*(-500*x[index][1]-x[index][0]*mu*(-1.0+x[index][0])*x[index][1]-(x[index][0]-0.5)*mu*(-1.0+x[index][0])*x[index][1]-x[index][0]*(x[index][0]-0.5)*mu*x[index][1]);
	}
	else{
		printf("Groot probleme hier\n");
	}

}// For Lotka-Volterra
static modelica_real ddx(modelica_real** x, const uinteger index, modelica_real* state){
	if(index == 0){
		return 0.5*(1.5*x[0][1] - x[0][0]*x[1][1] - x[0][1]*x[1][0]);
	}
	else if(index == 1){
		return 0.5*(x[0][0]*x[1][1] + x[0][1]*x[1][0] - 7*x[1][1]);
	}
	else
		exit(2);
}


// For bball on Flat surface
static modelica_real ddx(modelica_real** x, const uinteger index, modelica_real* state){
	if(index == 0){
		return 0.5*(-0.1*x[0][1]);
	}
	else if(index == 1){
		return 0.5*(-0.1*x[1][1] - state[6]*(x[2][1]*1e6 + 30*x[1][1]));
	}
	else if(index == 2){
		return 0.5*(x[1][1]);
	}
	else
		exit(2);
}


// advection
static modelica_real ddx(modelica_real** x, const uinteger index, modelica_real* state){
	modelica_real mu =1000;
	if(index > 0 && index < 500){
		return 0.5*(mu*x[index][1]*(0.5-x[index][0])*x[index][0] -(-1.0+x[index][0])*mu*x[index][1]*x[index][0] -(x[index][1]-x[index-1][1])*500+ (-1.0+x[index][0])*mu*x[index][1]*(0.5-x[index][0]));
	}
	else if(index == 0){
		return 0.5*(-500*x[index][1]-x[index][0]*mu*(-1.0+x[index][0])*x[index][1]-(x[index][0]-0.5)*mu*(-1.0+x[index][0])*x[index][1]-x[index][0]*(x[index][0]-0.5)*mu*x[index][1]);
	}
	else{
		printf("Groot probleme hier\n");
	}
}

static modelica_real ddx(modelica_real** x, const uinteger index, modelica_real* state){
	if(index == 0){
		return 0.5*(x[13][1] - x[1][1]);
	}
	else if(index == 1){
		return 0.5*((((0.075 * (x[0][1]) - x[1][1] * 0.000089) + (0.049 * (1 - state[55]) + 2.49 * state[55]) * (x[2][1])) / 0.00005));
	}
	else if(index == 2){
		return 0.5*(x[1][1] - x[3][1]);
	}
	else if(index == 3){
		return 0.5*((((0.049 * (1 - state[55]) + 2.49 * state[55]) * (x[1][1] - x[3][1]))  - (1.2870012870012870 * x[16][1] + 0.0334 * x[3][1]))/0.000416);
	}
	else if(index == 4){
		return 0.5*(x[20][1] - x[5][1]);
	}
	else if(index == 5){
		return 0.5*(((0.06 * x[4][1] - 0.0000594 * x[5][1]) - ((0.0243 * (1 - state[70]) + 0.523 * state[70]) * x[6][1] )) / 0.00005);
	}
	else if(index == 6){
		return 0.5*(x[5][1] - x[7][1]);
	}
	else if(index == 7){
		return 0.5*((((0.0243 * (1 - state[70]) + 0.523 * state[70]) * x[6][1]) - (0.4500450045004500 * x[9][1] + 0.0251 * x[7][1])) / 0.000206);
	}
	else if(index == 8){
		return 0.5*((0.5624296962879640 * x[11][1] - 0.6752194463200539 * x[8][1]) / 0.053 + x[10][1]);
	}
	else if(index == 9){
		return 0.5*(x[7][1] - x[10][1]);
	}
	else if(index == 10){
		return 0.5*((0.4500450045004500 * x[9][1] - 0.0227 * x[10][1] - 0.6752194463200539 * x[8][1]) / 0.00005);
	}
	else if(index == 11){
		return 0.5*(((0.1500150015001500 * x[14][1] - 0.5624296962879640 * x[11][1]) / 0.0379) - (0.5624296962879640 * x[11][1] - 0.6752194463200539 * x[8][1]) / 0.053));
	}
	else if(index == 12){
		return 0.5*(- x[13][1] - ((0.2 * x[12][1] - 0.1500150015001500 * x[14][1]) / 0.0252));
	}
	else if(index == 13){
		return 0.5*((0.1500150015001500 * x[14][1] - 0.075 * x[0][1]) / 0.00005);
	}
	else if(index == 14){
		return 0.5*(((0.2 * x[12][1] - 0.1500150015001500 * x[14][1]) / 0.0252) - ((0.1500150015001500 * x[14][1] - 0.5624296962879640 * x[11][1]) / 0.0379));
	}
	else if(index == 15){
		return 0.5*(((0.5524861878453039 * x[18][1] - 0.6097560975609756 * x[15][1]) / 0.178) + x[17][1]);
	}
	else if(index == 16){
		return 0.5*(x[3][1] - x[17][1]);
	}
	else if(index == 17){
		return 0.5*((1.2870012870012870 * x[16][1] - 0.0824 * x[17][1] - 0.6097560975609756 * x[15][1]) / 0.00005);
	}
	else if(index == 18){
		return 0.5*(((0.0755287009063444 * x[21][1] - 0.5524861878453039 * x[18][1]) / 0.667) - ((0.5524861878453039 * x[18][1] - 0.6097560975609756 * x[15][1]) / 0.178));
	}
	else if(index == 19){
		return 0.5*(- x[20][1] - ((0.0135354629128316 * x[19][1] - 0.0755287009063444 * x[21][1]) / 0.0233));
	}
	else if(index == 20){
		return 0.5*((0.0135354629128316 * x[19][1] - 0.0267 * x[20][1] - 0.06 * x[4][1]) / 0.00005);
	}
	else if(index == 21){
		return 0.5*(((0.0135354629128316 * x[19][1] - 0.0755287009063444 * x[21][1]) / 0.0233) - ((0.0755287009063444 * x[21][1] - 0.5524861878453039 * x[18][1]) / 0.667));
	}
	else
		exit(2);
}
