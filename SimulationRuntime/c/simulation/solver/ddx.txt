// For Lotka-Volterra
static modelica_real ddx(modelica_real** x, const uinteger index, modelica_real* state){
	if(index == 0){
		return 0.5*(1.5*x[0][1] - x[0][0]*x[1][1] - x[0][1]*x[1][0]);
	}
	else if(index == 1){
		return 0.5*(x[0][0]*x[1][1] + x[0][1]*x[1][0] - 7*x[1][1]);
	}
	else
		exit(2);
}


// For bball on Flat surface
static modelica_real ddx(modelica_real** x, const uinteger index, modelica_real* state){
	if(index == 0){
		return 0.5*(-0.1*x[0][1]);
	}
	else if(index == 1){
		return 0.5*(-0.1*x[1][1] - state[6]*(x[2][1]*1e6 + 30*x[1][1]));
	}
	else if(index == 2){
		return 0.5*(x[1][1]);
	}
	else
		exit(2);
}


// advection
static modelica_real ddx(modelica_real** x, const uinteger index, modelica_real* state){
	modelica_real mu =1000;
	if(index > 0 && index < 500){
		return 0.5*(mu*x[index][1]*(0.5-x[index][0])*x[index][0] -(-1.0+x[index][0])*mu*x[index][1]*x[index][0] -(x[index][1]-x[index-1][1])*500+ (-1.0+x[index][0])*mu*x[index][1]*(0.5-x[index][0]));
	}
	else if(index == 0){
		return 0.5*(-500*x[index][1]-x[index][0]*mu*(-1.0+x[index][0])*x[index][1]-(x[index][0]-0.5)*mu*(-1.0+x[index][0])*x[index][1]-x[index][0]*(x[index][0]-0.5)*mu*x[index][1]);
	}
	else{
		printf("Groot probleme hier\n");
	}
}// For Lotka-Volterra
static modelica_real ddx(modelica_real** x, const uinteger index, modelica_real* state){
	if(index == 0){
		return 0.5*(1.5*x[0][1] - x[0][0]*x[1][1] - x[0][1]*x[1][0]);
	}
	else if(index == 1){
		return 0.5*(x[0][0]*x[1][1] + x[0][1]*x[1][0] - 7*x[1][1]);
	}
	else
		exit(2);
}


// For bball on Flat surface
static modelica_real ddx(modelica_real** x, const uinteger index, modelica_real* state){
	if(index == 0){
		return 0.5*(-0.1*x[0][1]);
	}
	else if(index == 1){
		return 0.5*(-0.1*x[1][1] - state[6]*(x[2][1]*1e6 + 30*x[1][1]));
	}
	else if(index == 2){
		return 0.5*(x[1][1]);
	}
	else
		exit(2);
}


// advection
static modelica_real ddx(modelica_real** x, const uinteger index, modelica_real* state){
	modelica_real mu =1000;
	if(index > 0 && index < 500){
		return 0.5*(mu*x[index][1]*(0.5-x[index][0])*x[index][0] -(-1.0+x[index][0])*mu*x[index][1]*x[index][0] -(x[index][1]-x[index-1][1])*500+ (-1.0+x[index][0])*mu*x[index][1]*(0.5-x[index][0]));
	}
	else if(index == 0){
		return 0.5*(-500*x[index][1]-x[index][0]*mu*(-1.0+x[index][0])*x[index][1]-(x[index][0]-0.5)*mu*(-1.0+x[index][0])*x[index][1]-x[index][0]*(x[index][0]-0.5)*mu*x[index][1]);
	}
	else{
		printf("Groot probleme hier\n");
	}
}
